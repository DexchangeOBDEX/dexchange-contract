/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Token, TokenInterface } from "../Token";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_totalSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260126003553480156200001657600080fd5b50604051620013b8380380620013b883398181016040528101906200003c919062000369565b826000908051906020019062000054929190620000e1565b5081600190805190602001906200006d929190620000e1565b50600354600a6200007f919062000586565b816200008c9190620005d7565b600281905550600254600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050506200069d565b828054620000ef9062000667565b90600052602060002090601f0160209004810192826200011357600085556200015f565b82601f106200012e57805160ff19168380011785556200015f565b828001600101855582156200015f579182015b828111156200015e57825182559160200191906001019062000141565b5b5090506200016e919062000172565b5090565b5b808211156200018d57600081600090555060010162000173565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001fa82620001af565b810181811067ffffffffffffffff821117156200021c576200021b620001c0565b5b80604052505050565b60006200023162000191565b90506200023f8282620001ef565b919050565b600067ffffffffffffffff821115620002625762000261620001c0565b5b6200026d82620001af565b9050602081019050919050565b60005b838110156200029a5780820151818401526020810190506200027d565b83811115620002aa576000848401525b50505050565b6000620002c7620002c18462000244565b62000225565b905082815260208101848484011115620002e657620002e5620001aa565b5b620002f38482856200027a565b509392505050565b600082601f830112620003135762000312620001a5565b5b815162000325848260208601620002b0565b91505092915050565b6000819050919050565b62000343816200032e565b81146200034f57600080fd5b50565b600081519050620003638162000338565b92915050565b6000806000606084860312156200038557620003846200019b565b5b600084015167ffffffffffffffff811115620003a657620003a5620001a0565b5b620003b486828701620002fb565b935050602084015167ffffffffffffffff811115620003d857620003d7620001a0565b5b620003e686828701620002fb565b9250506040620003f98682870162000352565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115620004915780860481111562000469576200046862000403565b5b6001851615620004795780820291505b8081029050620004898562000432565b945062000449565b94509492505050565b600082620004ac57600190506200057f565b81620004bc57600090506200057f565b8160018114620004d55760028114620004e05762000516565b60019150506200057f565b60ff841115620004f557620004f462000403565b5b8360020a9150848211156200050f576200050e62000403565b5b506200057f565b5060208310610133831016604e8410600b8410161715620005505782820a9050838111156200054a576200054962000403565b5b6200057f565b6200055f84848460016200043f565b9250905081840481111562000579576200057862000403565b5b81810290505b9392505050565b600062000593826200032e565b9150620005a0836200032e565b9250620005cf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846200049a565b905092915050565b6000620005e4826200032e565b9150620005f1836200032e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200062d576200062c62000403565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200068057607f821691505b6020821081141562000697576200069662000638565b5b50919050565b610d0b80620006ad6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461013457806370a082311461015257806395d89b4114610182578063a9059cbb146101a0578063dd62ed3e146101d057610093565b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100e657806323b872dd14610104575b600080fd5b6100a0610200565b6040516100ad91906108c8565b60405180910390f35b6100d060048036038101906100cb9190610983565b61028e565b6040516100dd91906109de565b60405180910390f35b6100ee6103b9565b6040516100fb9190610a08565b60405180910390f35b61011e60048036038101906101199190610a23565b6103bf565b60405161012b91906109de565b60405180910390f35b61013c6105ab565b6040516101499190610a08565b60405180910390f35b61016c60048036038101906101679190610a76565b6105b1565b6040516101799190610a08565b60405180910390f35b61018a6105c9565b60405161019791906108c8565b60405180910390f35b6101ba60048036038101906101b59190610983565b610657565b6040516101c791906109de565b60405180910390f35b6101ea60048036038101906101e59190610aa3565b6106ba565b6040516101f79190610a08565b60405180910390f35b6000805461020d90610b12565b80601f016020809104026020016040519081016040528092919081815260200182805461023990610b12565b80156102865780601f1061025b57610100808354040283529160200191610286565b820191906000526020600020905b81548152906001019060200180831161026957829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156102c957600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103a79190610a08565b60405180910390a36001905092915050565b60025481565b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610443576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043a90610b90565b60405180910390fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610502576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f990610bfc565b60405180910390fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461058e9190610c4b565b925050819055506105a08484846106df565b600190509392505050565b60035481565b60046020528060005260406000206000915090505481565b600180546105d690610b12565b80601f016020809104026020016040519081016040528092919081815260200182805461060290610b12565b801561064f5780601f106106245761010080835404028352916020019161064f565b820191906000526020600020905b81548152906001019060200180831161063257829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156106a557600080fd5b6106b03384846106df565b6001905092915050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561071957600080fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107689190610c4b565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107be9190610c7f565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516108229190610a08565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561086957808201518184015260208101905061084e565b83811115610878576000848401525b50505050565b6000601f19601f8301169050919050565b600061089a8261082f565b6108a4818561083a565b93506108b481856020860161084b565b6108bd8161087e565b840191505092915050565b600060208201905081810360008301526108e2818461088f565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061091a826108ef565b9050919050565b61092a8161090f565b811461093557600080fd5b50565b60008135905061094781610921565b92915050565b6000819050919050565b6109608161094d565b811461096b57600080fd5b50565b60008135905061097d81610957565b92915050565b6000806040838503121561099a576109996108ea565b5b60006109a885828601610938565b92505060206109b98582860161096e565b9150509250929050565b60008115159050919050565b6109d8816109c3565b82525050565b60006020820190506109f360008301846109cf565b92915050565b610a028161094d565b82525050565b6000602082019050610a1d60008301846109f9565b92915050565b600080600060608486031215610a3c57610a3b6108ea565b5b6000610a4a86828701610938565b9350506020610a5b86828701610938565b9250506040610a6c8682870161096e565b9150509250925092565b600060208284031215610a8c57610a8b6108ea565b5b6000610a9a84828501610938565b91505092915050565b60008060408385031215610aba57610ab96108ea565b5b6000610ac885828601610938565b9250506020610ad985828601610938565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b2a57607f821691505b60208210811415610b3e57610b3d610ae3565b5b50919050565b7f496e73756666696369656e742042616c616e6365000000000000000000000000600082015250565b6000610b7a60148361083a565b9150610b8582610b44565b602082019050919050565b60006020820190508181036000830152610ba981610b6d565b9050919050565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b6000610be660168361083a565b9150610bf182610bb0565b602082019050919050565b60006020820190508181036000830152610c1581610bd9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c568261094d565b9150610c618361094d565b925082821015610c7457610c73610c1c565b5b828203905092915050565b6000610c8a8261094d565b9150610c958361094d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cca57610cc9610c1c565b5b82820190509291505056fea264697066735822122066ec297d33a498da50225a6e66fe72c3f1160c637ba8fc290c77cc962d25d23664736f6c634300080b0033";

type TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Token__factory extends ContractFactory {
  constructor(...args: TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Token> {
    return super.deploy(
      _name,
      _symbol,
      _totalSupply,
      overrides || {}
    ) as Promise<Token>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _totalSupply,
      overrides || {}
    );
  }
  override attach(address: string): Token {
    return super.attach(address) as Token;
  }
  override connect(signer: Signer): Token__factory {
    return super.connect(signer) as Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenInterface {
    return new utils.Interface(_abi) as TokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Token {
    return new Contract(address, _abi, signerOrProvider) as Token;
  }
}
